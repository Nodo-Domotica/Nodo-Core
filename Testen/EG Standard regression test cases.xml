<?xml version="1.0" encoding="UTF-8" ?>
<EventGhost Name="Configuration Tree" Expanded="True" Version="1462" Guid="{2F55A8F9-8284-4804-ABF4-25EFDD2C2F8B}" Time="1289837922.02">
    <Autostart Name="Autostart" Expanded="True">
        <Action>
            EventGhost.ShowOSD(u'EventGhost with \nstandard testcases \nfor Nodo Due', u'0;-64;0;0;0;400;255;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 5.0, False)
        </Action>
        <Plugin File="Serial" Identifier="Serial">
            gAIoSwZNAEtLA0sASwBLAYhYAgAAAFxucQBYBQAAAFVuaXQ1cQFLAHRxAi4=
        </Plugin>
        <Plugin File="Serial" Identifier="Serial2">
            gAIoSwdNAEtLA0sASwBLAYhYAgAAAFxucQBYBQAAAFVuaXQ2cQFLAHRxAi4=
        </Plugin>
        <Plugin File="Timer" Identifier="Timer">
            gAIpLg==
        </Plugin>
        <Plugin File="Scheduler" Identifier="Scheduler">
            gAJYIgAAADAxMDEsMDUwMSwwNjA2LDEyMjQsMTIyNSwxMjI2LDEyMzFxAFgAAAAAcQGJh3ECLg==
        </Plugin>
    </Autostart>
    <Folder Name="Standard test cases" Expanded="True">
        <Folder Name="Restore proper settings for further testing" Expanded="True">
            <Macro Name="Restore proper settings for further testing" Expanded="True">
                <Action>
                    Serial.Write(u'Reset;')
                </Action>
                <Action>
                    Serial2.Write(u'Reset;')
                </Action>
                <Action>
                    EventGhost.Wait(5.0)
                </Action>
                <Action>
                    Serial.Write(u'Unit 4, 10;')
                </Action>
                <Action>
                    Serial2.Write(u'Unit 5,10;')
                </Action>
                <Action>
                    EventGhost.Wait(5.0)
                </Action>
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventListShow;')
                </Action>
                <Action>
                    Serial2.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'WaitFreeRF Series,5;')
                </Action>
                <Action>
                    Serial2.Write(u'WaitFreeRF Series,10;')
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings IR&amp;RF;')
                </Action>
                <Action>
                    Serial2.Write(u'TransmitSettings IR&amp;RF;')
                </Action>
            </Macro>
            <Macro Name="Trace switches" Expanded="True">
                <Action Name="switch traces on/off">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'trace on;')
                </Action>
                <Action>
                    Serial.Write(u'trace off;')
                </Action>
                <Action>
                    Serial2.Write(u'trace on;')
                </Action>
                <Action>
                    Serial2.Write(u'trace off;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 0: set unit numbers and basic settings">
            <Macro Name="Try setting unit numbers from 0 to 16">
                <Action>
                    Serial.Write(u'Unit 0;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 1;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 2;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 10;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 11;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 12;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 13;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 14;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 15;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 16;')
                </Action>
            </Macro>
            <Macro Name="Try setting home addresses 0 and 11">
                <Action>
                    Serial.Write(u'Unit 1, 1;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 4, 0;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 4, 5;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 4, 11;')
                </Action>
            </Macro>
            <Macro Name="Try invalid TransMitSettings">
                <Action Name="invalid:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings Anything;')
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings RF&amp;IR;')
                </Action>
                <Action Name="valid:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings RF;')
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings IR;')
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings IR&amp;RF;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 1: Set 8 UserEvents to generate sounds">
            <Macro Name="Test case 1: Set 8 UserEvents to generate sounds">
                <Action Name="Install EventList">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistErase ;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,1; Sound 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,2; Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,3; Sound 3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,4; Sound 4;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,5; Sound 5;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,6; Sound 6;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,7; Sound 7;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,8; Sound 8;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,4;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,5;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,6;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,7;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,8;')
                </Action>
                <Action Name="Show EventList">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventListShow;')
                </Action>
                <Action Name="Test individual sounds">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,2;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,3;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,4;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,5;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,6;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,7;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,8;')
                </Action>
                <Action Name="Auto-generate all sounds">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,0;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 2: test WiredIn and WiredOut">
            <Macro Name="Test case 2: test WiredIn and WiredOut">
                <Action Name="Install EventList">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 1,1; WiredOut 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 2,1; WiredOut 2,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 3,1; WiredOut 3,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 4,1; WiredOut 4,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 1,1; Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 2,1; Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 3,1; Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 4,1; Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 1,0; WiredOut 1,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 2,0; WiredOut 2,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 3,0; WiredOut 3,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 4,0; WiredOut 4,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 1,0; Sound 3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 2,0; Sound 3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 3,0; Sound 3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 4,0; Sound 3;')
                </Action>
                <Action Name="Test individual ports: shortcircuit input port one by one with a jumper">
                    EventGhost.Comment()
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 3: set and show clock on local and remote Nodo">
            <Macro Name="Test case 3: set and show clock on serially connected Nodo">
                <Action Name="Set clock to Sunday 10-07-2005, 15.30, DLS on">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'ClockSetDate 10,11;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetYear 20,10;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetDOW 4;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetTime 15, 55;')
                </Action>
                <Action Name="Now show current clock setting">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetYear;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetDate;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetTime;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetDOW;')
                </Action>
                <Action>
                    Serial.Write(u'SendStatus DaylightSaving;')
                </Action>
            </Macro>
            <Macro Name="Test case 3: set and show clock on remote connected Nodo">
                <Action>
                    Serial.Write(u'Divert 5;ClockSetDate 5,7;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;ClockSetYear 20,10;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;ClockSetTime 17, 16;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;ClockSetDOW 6;')
                </Action>
                <Action Name="Now show current clock setting">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;SendStatus ClockSetYear;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ClockSetDate;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;SendStatus ClockSetTime;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;SendStatus ClockSetDOW;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;SendStatus DaylightSaving;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name='Test case 4: send and receive "old" KAKU signals'>
            <Macro Name='Test case 4: send and receive "old" KAKU signals'>
                <Action Name="Install EventList">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistErase;')
                </Action>
                <Action Name="Send KAKU A1 on and off">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, ON; SendKAKU A1, ON;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, ON; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, ON; SendKAKU A1, off;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, ON; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, ON; SendKAKU A1, ON;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, OFF; SendKAKU A1, Off;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, Off; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, OFF; SendKAKU A1, On;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, Off; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, OFF; SendKAKU A1, Off;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, OFF; SendUserEvent 4,99;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 10,10; SendUserEvent 4,99;')
                </Action>
                <Action>
                    Serial.Write(u'trace on;')
                </Action>
                <Action Name="Now press A2 on and off to test">
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'Press A2 ON to test "ON" sequence\nPress A2 OFF to test "OFF" sequence', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 5.0, False)
                </Action>
            </Macro>
            <Macro Name='Test case 4: send and receive "old" KAKU signals'>
                <Event Name="Unit5.INTERNAL: EventList, Command, (SendUserEvent 4, 99)" />
                <Action>
                    EventGhost.ShowOSD(u'UserEvent 4,99 received', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 5.0, False)
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 5: test timers">
            <Macro Name="Test case 5: test timers">
                <Action Name="Install EventList">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistErase;')
                </Action>
                <Action Name="Valid timers:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; TimerSet 1, 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; TimerSet 2, 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; TimerSet 3, 3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; TimerSet 15, 5;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; Delay 2;')
                </Action>
                <Action Name="Invalid timers:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; TimerSet 0, 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; TimerSet 16, 5;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; Timer 1; Sound 1, 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; Timer 2; Sound 1, 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; Timer 3; Sound 1, 3;')
                </Action>
                <Action Name="Now trigger the timer sequence">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 5,0;')
                </Action>
                <Action Name="Please wait 3 seconds for all timers to expire">
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'Please wait for all timers to expire', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'ShowTimerSet', 0.0)
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'ResetTimer2', 50.0)
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'ShowTimerSet', 60.0)
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'ShowTimerSet', 120.0)
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'ResetTimerAll', 125.0)
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'Please wait until you see text "DONE"', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
            </Macro>
            <Macro Name="Show TimerSet">
                <Event Name="Main.ShowTimerSet" />
                <Action>
                    EventGhost.ShowOSD(u'Current Timer Settings:', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'Status TimerSet 1;Status TimerSet 2;Status TimerSet 3; Status Timerset 15;')
                </Action>
            </Macro>
            <Macro Name="Reset timer2">
                <Event Name="Main.ResetTimer2" />
                <Action>
                    EventGhost.ShowOSD(u'Cancelling timer2!', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'TimerReset 2;')
                </Action>
            </Macro>
            <Macro Name="Reset timerAll">
                <Event Name="Main.ResetTimerAll" />
                <Action>
                    EventGhost.ShowOSD(u'Cancelling All timers!', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'TimerReset;')
                </Action>
                <Action>
                    Serial.Write(u'TimerReset 0;')
                </Action>
            </Macro>
            <Macro Name="Timer 1 expires">
                <Event Name="Unit5.INPUT: Timers, Event, (Timer 1, 0)" />
                <Action>
                    EventGhost.ShowOSD(u'Timer 1 has expired!', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
            </Macro>
            <Macro Name="Timer 3 expires">
                <Event Name="Unit5.INPUT: Timers, Event, (Timer 3, 0)" />
                <Action>
                    EventGhost.ShowOSD(u'Timer 3 has expired!', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'ShowRandomTimerSet', 0.0)
                </Action>
            </Macro>
            <Macro Name="Show RandomTimerSettings">
                <Event Name="Main.ShowRandomTimerSet" />
                <Action>
                    EventGhost.ShowOSD(u'Demonstrate random timer settings', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'TimerRandom 1, 5;TimerRandom 2, 50;TimerRandom 3, 500;')
                </Action>
                <Action>
                    Serial.Write(u'Status TimerSet 1;Status TimerSet 2;Status TimerSet 3;')
                </Action>
                <Action>
                    Serial.Write(u'TimerRandom 1, 5;TimerRandom 2, 50;TimerRandom 3, 500;')
                </Action>
                <Action>
                    Serial.Write(u'Status TimerSet 1;Status TimerSet 2;Status TimerSet 3;')
                </Action>
                <Action>
                    Serial.Write(u'TimerRandom 1, 5;TimerRandom 2, 50;TimerRandom 3, 500;')
                </Action>
                <Action>
                    Serial.Write(u'Status TimerSet 1;Status TimerSet 2;Status TimerSet 3;')
                </Action>
                <Action>
                    Serial.Write(u'TimerReset 1;TimerReset 2;TimerReset 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status TimerSet 1;Status TimerSet 2;Status TimerSet 3;')
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'DONE', u'0;-96;0;0;0;700;0;1;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 5.0, False)
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 6: test variables">
            <Macro Name="Test case 6: test variables">
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 6,0;VariableClear 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 6,0;VariableSet 2,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;KAKU A1, on;VariableInc 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;KAKU A1, on;SendUserEvent  6,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;KAKU A1, off;VariableDec 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;KAKU A1, off;SendUserEvent  6,2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;Variable 1,5;VariableInc 2,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;Variable 1,5;UserEvent 6,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;Variable 1,5;VariableSet 1,0;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 6,0;')
                </Action>
                <Action>
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'press A1 on to increment Var1,\npress A1 off to decrement Var1.', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
            </Macro>
            <Macro Name="Variable has been increased">
                <Event Name="Unit5.INPUT: EventList, (SendUserEvent 6, 1)" />
                <Action>
                    EventGhost.ShowOSD(u'Increased!', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1; Status VariableSet,2;')
                </Action>
                <Action>
                    Serial.Write(u'VariableClear;')
                </Action>
            </Macro>
            <Macro Name="Variable has been decreased">
                <Event Name="Unit5.INPUT: EventList, (SendUserEvent 6, 2)" />
                <Action>
                    EventGhost.ShowOSD(u'Decreased!', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1; Status VariableSet,2;')
                </Action>
            </Macro>
            <Macro Name="Reset 1, increase 2">
                <Event Name="Unit5.INPUT: EventList, (UserEvent 6, 3)" />
                <Action>
                    EventGhost.ShowOSD(u'Var1 reached value 5:\n* var2 increased\n* var1 reset to 0', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1; Status VariableSet,2;')
                </Action>
            </Macro>
            <Macro Name="Test VariableInc and Dec with different parameters">
                <Action>
                    Serial.Write(u'VariableSet 1,5;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;')
                </Action>
                <Action>
                    Serial.Write(u'VariableInc 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;')
                </Action>
                <Action>
                    Serial.Write(u'VariableInc 1,0;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;')
                </Action>
                <Action>
                    Serial.Write(u'VariableInc 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;')
                </Action>
                <Action>
                    Serial.Write(u'VariableInc 1,2;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;')
                </Action>
                <Action>
                    Serial.Write(u'VariableSet 1,10;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;')
                </Action>
                <Action>
                    Serial.Write(u'VariableDec 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;')
                </Action>
                <Action>
                    Serial.Write(u'VariableDec 1,0;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;')
                </Action>
                <Action>
                    Serial.Write(u'VariableDec 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;')
                </Action>
                <Action>
                    Serial.Write(u'VariableDec 1,2;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;')
                </Action>
            </Macro>
            <Macro Name="Test VariableClear in its different options">
                <Action Name="Test VariableClear in its different options">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'VariableSet 4,15;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,4;')
                </Action>
                <Action Name="Explicitely clear 4">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'VariableClear 4;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,4;')
                </Action>
                <Action Name="Clear without par1: default, clear all vars">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'VariableSet 1,11;VariableSet 4,15;VariableSet 15,155;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;Status VariableSet,4;Status VariableSet,15;')
                </Action>
                <Action>
                    Serial.Write(u'VariableClear;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;Status VariableSet,4;Status VariableSet,15;')
                </Action>
                <Action Name="Clear with par1=0: clear all variables">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'VariableSet 1,11;VariableSet 4,15;VariableSet 15,155;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;Status VariableSet,4;Status VariableSet,15;')
                </Action>
                <Action>
                    Serial.Write(u'VariableClear,0;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;Status VariableSet,4;Status VariableSet,15;')
                </Action>
                <Action Name="Check if other vars remain untouched with explicit clear">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'VariableSet 1,11;VariableSet 2,12;VariableSet 3,13;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;Status VariableSet,2;Status VariableSet,3;')
                </Action>
                <Action>
                    Serial.Write(u'VariableClear,2;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1;Status VariableSet,2;Status VariableSet,3;')
                </Action>
                <Action>
                    Serial.Write(u'VariableSet 13,13;VariableSet 14,14;VariableSet 15,15;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,13;Status VariableSet,14;Status VariableSet,15;')
                </Action>
                <Action>
                    Serial.Write(u'VariableClear,14;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,13;Status VariableSet,14;Status VariableSet,15;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 7: test TransmitSettings">
            <Macro Name="Test case 7: test TransmitSettings">
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,1;VariableSet 1,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,2;VariableInc 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,3;SenduserEvent 7,91;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,3;SenduserEvent 7,92;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,3;SenduserEvent 7,93;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,3;SenduserEvent 7,94;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,3;SenduserEvent 7,95;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,3;SenduserEvent 7,96;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,3;SenduserEvent 7,97;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,3;SenduserEvent 7,98;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,3;SenduserEvent 7,99;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;Variable 1,1; Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventListShow;')
                </Action>
            </Macro>
            <Macro Name="All TransmitSettings permutations">
                <Action Name="Best way to test: manually invoke the lines below with F5">
                    EventGhost.Comment()
                </Action>
                <Action Name="Note: UserEvent 7.1/7.2 will generate an event, but that should NOT go out on IR and/or RF">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'trace on;')
                </Action>
                <Action Name="Events to IR">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings IR;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,1;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,2;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,3;')
                </Action>
                <Action Name="Events to RF">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings RF;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,1;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,2;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,3;')
                </Action>
                <Action Name="Events to IR&amp;RF">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings IR&amp;RF;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,1;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,2;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,3;')
                </Action>
                <Action Name=" ">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'trace off;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 8: test command sourcing">
            <Macro Name="Test case 8: test command sourcing">
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;KAKU A3, on;SendUserEvent  8,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 8,2;SendUserEvent  8,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistShow;')
                </Action>
                <Action Name="Press A3 on to trigger first line, or send UserEvent 8.2">
                    EventGhost.Comment()
                </Action>
            </Macro>
            <Macro Name="test triggers">
                <Action>
                    Serial.Write(u'SendKAKU A3, on;')
                </Action>
                <Action>
                    Serial.Write(u'KAKU A3, on;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 8,2;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 9: test automatic DLS switchover">
            <Macro Name="Required: Clocked Nodo on Serial1 ! !!!!!!!!!!!!!!!!!!!!!!!!!" />
            <Folder Name="Test by shifting on date level">
                <Macro Name="First: set clock to summertime 2009.">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: unknown">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="First: set clock to summertime 2009.">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 1,7;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,09;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 12,00;')
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Now set clock to February 1, 2010. Wintertime.">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="Now set clock to February 1, 2010. Wintertime.">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="Serial Port: Write Data: ClockSetDate 1,2;">
                        Serial.Write(u'ClockSetDate 1,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 12,00;')
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Set clock to first day of DLS: april 1, 2010. Summertime.">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="Set clock to first day of DLS: april 1, 2010. Summertime.">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 1,4;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 12,00;')
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Set clock Nov 15, 2010. Wintertime.">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="Set clock Nov 15, 2010. Wintertime.">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 15,11;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 12,00;')
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
            </Folder>
            <Folder Name="Test by shifting on clock level">
                <Macro Name="Execute these macro's in sequence! Check entry and exit states!" />
                <Macro Name="Preparation step 1: set clock to summertime 2009.">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: unknown">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="Preparation step 1: set clock to summertime 2009.">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 1,7;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,09;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 12,00;')
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Preparation step 2: set date to wintertime to allow automatic switchover and time adjustment">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="Preparation step 2: set date to wintertime to allow automatic switchover and time adjustment">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 1,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,09;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 12,00;')
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 28-03-2010">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 28,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 1,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 80.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 31-10-2010">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 31,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 2,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 31-10-2010, see if switchover to wintertime does not repeat itself">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: should stay on wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 31,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 2,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 27-03-2011">
                    <Action Name="entry state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 27,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,11;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 1,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 30-10-2011">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 30,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,11;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 2,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 25-03-2012">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 25,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,12;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 1,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 28-10-2012">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 28,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,12;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 2,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 31-03-2013">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 31,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,13;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 1,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 27-10-2013">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 27,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,13;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 2,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 30-03-2014">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 30,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,14;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 1,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 26-10-2014">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 26,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,14;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 2,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 29-03-2015">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 29,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,15;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 1,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 25-10-2015">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 25,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,15;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 2,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 27-03-2016">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 27,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,16;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 1,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 30-10-2016">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 30,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,16;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 2,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 26-03-2017">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 26,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,17;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 1,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 29-10-2017">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 29,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,17;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 2,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 25-03-2018">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 25,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,18;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 1,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 28-10-2018">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 28,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,18;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 2,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 31-03-2019">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 31,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,19;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 1,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Test DLS switchover: 27-10-2019">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 27,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,19;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 2,59;')
                    </Action>
                    <Action Name="Time before DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                    </Action>
                    <Action>
                        EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                    </Action>
                    <Action Name="Time after DLS switchover:">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
            </Folder>
            <Folder Name="Test what happens when user sets date back">
                <Macro Name="Preparation step 1: set clock to wintertime 2011.">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: unknown">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 1,1;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,11;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 12,00;')
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 5.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Preparation step 2: again set clock to wintertime 2011.">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: unknown">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 1,1;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,11;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetTime 12,00;')
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 5.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Preparation step 3: set clock to summertime 2011.">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: unknown">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 1,7;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,11;')
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 5.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Now user moves date back 1 month">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 1,6;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,11;')
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 5.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Now user moves date back to February">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 1,2;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,11;')
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 5.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
                <Macro Name="Now user moves date forward to August">
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="entry state: summertime">
                        EventGhost.Comment()
                    </Action>
                    <Action Name="exit state: wintertime">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetDate 1,8;')
                    </Action>
                    <Action>
                        Serial.Write(u'ClockSetYear 20,11;')
                    </Action>
                    <Action>
                        EventGhost.TriggerEvent(u'Case9_Show_Time', 5.0)
                    </Action>
                    <Action Name="********************************************************************************">
                        EventGhost.Comment()
                    </Action>
                </Macro>
            </Folder>
            <Macro Name="Restore current date/time">
                <Action>
                    Serial.Write(u'ClockSetYear 20,10;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetDate 15,11;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetTime 15,06;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetDOW 2;')
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                </Action>
            </Macro>
            <Macro Name="ShowTime">
                <Event Name="Main.Case9_Show_Time" />
                <Action Name="Show current date/time">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetYear;Status ClockSetDate;Status ClockSetTime;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 10: test Status &amp; SendStatus output">
            <Macro Name="Test case 10: test Status output">
                <Action Name="Valid:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status ClockDaylight;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetDate;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetTime;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetYear;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetDOW;')
                </Action>
                <Action>
                    Serial.Write(u'Status DaylightSaving;')
                </Action>
                <Action>
                    Serial.Write(u'Status TransmitSettings;')
                </Action>
                <Action>
                    Serial.Write(u'Status Simulate;')
                </Action>
                <Action>
                    Serial.Write(u'Status TimerSet 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status Trace;')
                </Action>
                <Action>
                    Serial.Write(u'Status Unit;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WaitFreeRF;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredOut 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredOut 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredOut 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredOut 4;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredAnalog 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredAnalog 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredAnalog 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredAnalog 4;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredIn 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredIn 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredIn 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredIn 4;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup 4;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger 4;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold 4;')
                </Action>
                <Action Name="obsolete, should be invalid">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status Home;')
                </Action>
                <Action>
                    Serial.Write(u'Status ReceiveRepeatsIR;')
                </Action>
                <Action>
                    Serial.Write(u'Status ReceiveRepeatsRF;')
                </Action>
                <Action>
                    Serial.Write(u'Status Rubbish;')
                </Action>
            </Macro>
            <Macro Name="Test case 10: test SendStatus output">
                <Action Name="Valid:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ClockDaylight;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ClockSetDate;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ClockSetTime;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ClockSetYear;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ClockSetDOW;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;SendStatus DaylightSaving;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus TransmitSettings;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus Simulate;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus TimerSet 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus Trace;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus Unit;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus VariableSet 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WaitFreeRF;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredOut 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredOut 2;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredOut 3;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredOut 4;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredAnalog 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredAnalog 2;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredAnalog 3;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredAnalog 4;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredIn 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredIn 2;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredIn 3;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredIn 4;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredPullup 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredPullup 2;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredPullup 3;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredPullup 4;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredSmittTrigger 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredSmittTrigger 2;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredSmittTrigger 3;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredSmittTrigger 4;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredThreshold 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredThreshold 2;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredThreshold 3;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredThreshold 4;')
                </Action>
                <Action Name="obsolete, should be invalid">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus Home;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ReceiveRepeatsIR;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ReceiveRepeatsRF;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 11: test WaitFreeRF on series or all">
            <Macro Name="Test case 11: test WaitFreeRF on series or all">
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventListShow;')
                </Action>
            </Macro>
            <Macro Name="Trigger series with various WaitFreeRF settings">
                <Action Name="For each setting, execute the UserEvent 11,1. While it is sending, try to frustrate by pressing a KAKU button">
                    EventGhost.Comment()
                </Action>
                <Action Name="WaitFreeRF Off: should not be bothered by a KAKU signal">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'WaitFreeRF Off;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 11,1;')
                </Action>
                <Action Name="WaitFreeRF Series: should wait with first send until KAKU shuts up, but after that will keep sending">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'WaitFreeRF Series;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 11,1;')
                </Action>
                <Action Name="WaitFreeRF Series: should wait at each and every send for a free RF">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'WaitFreeRF All;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 11,1;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 12: test VarBreak statements">
            <Macro Name="Test case 12: test VarBreak statements">
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action Name="UE 12.0: reset all variables to 0">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,0;VariableSet 1,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,0;VariableSet 2,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,0;VariableSet 3,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,0;VariableSet 4,0;')
                </Action>
                <Action Name="UE 12.1: increment var1, break if equal to 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,1;VariableInc 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,1;BreakOnVarEqu 1,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,1;Sound 1,1;')
                </Action>
                <Action Name="UE 12.2: increment var2, break if less than 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,2;VariableInc 2,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,2;BreakOnVarLess 2,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,2;Sound 2,1;')
                </Action>
                <Action Name="UE 12.3: increment var3, break if more than 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,3;VariableInc 3,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,3;BreakOnVarMore 3,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,3;Sound 3,1;')
                </Action>
                <Action Name="UE 12.4: increment var4, break if not equal to 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,4;VariableInc 4,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,4;BreakOnVarNEqu 4,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,4;Sound 4,1;')
                </Action>
            </Macro>
            <Macro Name="Serial Port: Write Data: ">
                <Action Name="execute these statements manually, group by group.">
                    EventGhost.Comment()
                </Action>
                <Action Name=" ">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'trace on;')
                </Action>
                <Action Name="UE 12.0: reset all variables to 0">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 12,0;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1; Status VariableSet,2; Status VariableSet,3; Status VariableSet,4;')
                </Action>
                <Action Name=" ">
                    EventGhost.Comment()
                </Action>
                <Action Name="UE 12.1: increment var1, break if equal to 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action Name="Sound should play on all values, except 3">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 12,1;')
                </Action>
                <Action Name=" ">
                    EventGhost.Comment()
                </Action>
                <Action Name="UE 12.2: increment var2, break if less than 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action Name="Sound should play on all values of 3 or higher">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 12,2;')
                </Action>
                <Action Name=" ">
                    EventGhost.Comment()
                </Action>
                <Action Name="UE 12.3: increment var3, break if more than 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action Name="Sound should play on all values of 3 or lower">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 12,3;')
                </Action>
                <Action Name=" ">
                    EventGhost.Comment()
                </Action>
                <Action Name="UE 12.4: increment var4, break if not equal to 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action Name="Sound should play on all value of 3 only">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 12,4;')
                </Action>
                <Action>
                    Serial.Write(u'trace off;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 13: test WiredPullup and WiredSmittTrigger">
            <Macro Name="Test case 13: test WiredPullup and WiredSmittTrigger">
                <Action Name="Set some settings">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'WiredPullup 1, on;')
                </Action>
                <Action>
                    Serial.Write(u'WiredPullup 2, off;')
                </Action>
                <Action>
                    Serial.Write(u'WiredPullup 3, 1;')
                </Action>
                <Action>
                    Serial.Write(u'WiredPullup 4, 0;')
                </Action>
                <Action>
                    Serial.Write(u'WiredSmittTrigger 1, 15;')
                </Action>
                <Action>
                    Serial.Write(u'WiredSmittTrigger 2, 25;')
                </Action>
                <Action>
                    Serial.Write(u'WiredSmittTrigger 3, 35;')
                </Action>
                <Action>
                    Serial.Write(u'WiredSmittTrigger 4, 45;')
                </Action>
                <Action>
                    Serial.Write(u'WiredThreshold 1, 110;')
                </Action>
                <Action>
                    Serial.Write(u'WiredThreshold 2, 120;')
                </Action>
                <Action>
                    Serial.Write(u'WiredThreshold 3, 130;')
                </Action>
                <Action>
                    Serial.Write(u'WiredThreshold 4,140;')
                </Action>
                <Action Name="show WiredPullups">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup,1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup,2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup,3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup,4;')
                </Action>
                <Action Name="show WiredSmittTrigger">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger,1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger,2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger,3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger,4;')
                </Action>
                <Action Name="show WiredThreshold">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold,1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold,2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold,3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold,4;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 14: test Clock triggered events">
            <Macro Name="Test case 14: test Clock triggered events">
                <Action Name="Needs clocked Nodo on serial1!!!">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;ClockSun 12,0; SendUserEvent 14,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;ClockMon 12,0; SendUserEvent 14,2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;ClockTue 12,0; SendUserEvent 14,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;ClockWed 12,0; SendUserEvent 14,4;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;ClockThu 12,0; SendUserEvent 14,5;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;ClockFri 12,0; SendUserEvent 14,6;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;ClockSat 12,0; SendUserEvent 14,7;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;ClockAll 13,0; SendUserEvent 14,8;')
                </Action>
                <Action Name="First set clock">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'ClockSetDOW 7;')
                </Action>
                <Action>
                    Serial.Write(u'SimulateDay 7;')
                </Action>
            </Macro>
            <Macro Name="Show OSD: Sunday 12.00 alarm">
                <Event Name="Unit5.OUTPUT: RF, (UserEvent 14, 1)" />
                <Action>
                    EventGhost.ShowOSD(u'Sunday 12.00 alarm', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 10.0, False)
                </Action>
            </Macro>
            <Macro Name="Show OSD: Monday 12.00 alarm">
                <Event Name="Unit5.OUTPUT: RF, (UserEvent 14, 2)" />
                <Action>
                    EventGhost.ShowOSD(u'Monday 12.00 alarm', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 10.0, False)
                </Action>
            </Macro>
            <Macro Name="Show OSD: Tuesday 12.00 alarm">
                <Event Name="Unit5.OUTPUT: RF, (UserEvent 14, 3)" />
                <Action>
                    EventGhost.ShowOSD(u'Tuesday 12.00 alarm', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 10.0, False)
                </Action>
            </Macro>
            <Macro Name="Show OSD: Wednesday 12.00 alarm">
                <Event Name="Unit5.OUTPUT: RF, (UserEvent 14, 4)" />
                <Action>
                    EventGhost.ShowOSD(u'Wednesday 12.00 alarm', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 10.0, False)
                </Action>
            </Macro>
            <Macro Name="Show OSD: Thursday 12.00 alarm">
                <Event Name="Unit5.OUTPUT: RF, (UserEvent 14, 5)" />
                <Action>
                    EventGhost.ShowOSD(u'Thursday 12.00 alarm', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 10.0, False)
                </Action>
            </Macro>
            <Macro Name="Show OSD: Friday 12.00 alarm">
                <Event Name="Unit5.OUTPUT: RF, (UserEvent 14, 6)" />
                <Action>
                    EventGhost.ShowOSD(u'Friday 12.00 alarm', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 10.0, False)
                </Action>
            </Macro>
            <Macro Name="Show OSD: Saturday 12.00 alarm">
                <Event Name="Unit5.OUTPUT: RF, (UserEvent 14, 7)" />
                <Action>
                    EventGhost.ShowOSD(u'Saturday 12.00 alarm', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 10.0, False)
                </Action>
            </Macro>
            <Macro Name="Show OSD: Everyday 13.00 alarm">
                <Event Name="Unit5.OUTPUT: RF, (UserEvent 14, 8)" />
                <Action>
                    EventGhost.ShowOSD(u'Daily 13.00 alarm', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 5, (0, 0), 0, 10.0, False)
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 15: test empty EventList behaviour">
            <Macro Name="Test case 15: test empty EventList behaviour">
                <Action>
                    Serial.Write(u'trace on;')
                </Action>
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 15,0;Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WildCard All,All;Sound 3;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 15,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventListShow;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 15,0;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 11;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 16: test WildCards">
            <Macro Name="test execution">
                <Action Name="Prerequisite: attach clocked Nodo on serial2, other Nodo on serial1">
                    EventGhost.Comment()
                </Action>
                <Action Name='Instructions: manually execute each test step through F5, or do what is described if it says "manual'>
                    EventGhost.Comment()
                </Action>
                <Action Name="Now execute the following test steps:">
                    EventGhost.Comment()
                </Action>
                <Action Name=" ">
                    EventGhost.Comment()
                </Action>
                <Action Name="Following steps are verified tetst cases:">
                    EventGhost.Comment()
                </Action>
                <Action Name="Press F5: this will run all necessary preparations">
                    EventGhost.TriggerEvent(u'Case16 initialize', 0.0)
                </Action>
                <Action Name="Manual: fire an IR signal into the Nodo">
                    EventGhost.Comment()
                </Action>
                <Action Name="Manual: generate incoming KAKU by pressing any KAKU command from a KAKU hand unit">
                    EventGhost.Comment()
                </Action>
                <Action Name="Manual: generate incoming KAKU via IR from Harmony remote">
                    EventGhost.Comment()
                </Action>
                <Action Name="Manual: generate incoming UserEvent via IR from Harmony remote">
                    EventGhost.Comment()
                </Action>
                <Action Name="Press F5: Timer will be set to 0, this will generate an event immediately">
                    Serial.Write(u'TimerSet 1,0;')
                </Action>
                <Action Name="Press F5: this will simulate one full day with all sunup/sundown events">
                    Serial.Write(u'Divert 5; SimulateDay 1;')
                </Action>
                <Action Name='Press F5: generate command for unknown unit. Unit5 should detect this as "OtherUnit"'>
                    Serial2.Write(u'Divert 9; ClockSetYear 20,10;')
                </Action>
                <Action Name="Manual: disable serialport 1, then enable it again">
                    EventGhost.Comment()
                </Action>
                <Action Name="Press F5: generate unknown signal from RF">
                    Serial.Write(u'UserEvent 16,200;')
                </Action>
                <Action Name="Press F5: generate unknown signal from serial">
                    Serial.Write(u'0xDEFEAC88;')
                </Action>
                <Action Name="Manual: short circuit one of the input ports on Nodo">
                    EventGhost.Comment()
                </Action>
                <Action Name="Press F5: set a variable">
                    Serial.Write(u'VariableSet 5,140; VariableInc 5, 3;')
                </Action>
                <Action Name="Press F5: send a weird Userevent from Nodo 2 to 1">
                    Serial2.Write(u'SendUserEvent  16,234;')
                </Action>
                <Action Name="Press F5: send a valid command to another unit">
                    Serial.Write(u'Divert 9; SendStatus DaylightSaving;')
                </Action>
                <Action Name="Press F5: send an unknown command via serial">
                    Serial.Write(u'0xFECBA900;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 16,201;')
                </Action>
                <Action Name=" ">
                    EventGhost.Comment()
                </Action>
            </Macro>
            <Macro Name="Serial Port: Write Data: boot;" />
            <Folder Name="Statusindicators: enabled means not yet occurred, disabled means the event has occurred">
                <Macro Name="UserEvent 16,01" id="1010" Enabled="False">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 1)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1010))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,02" id="1013" Enabled="False">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 1)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1013))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,03" id="1016">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1016))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 3)" />
                </Macro>
                <Macro Name="UserEvent 16,04" id="1019">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1019))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 4)" />
                </Macro>
                <Macro Name="UserEvent 16,05" id="1022">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1022))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 5)" />
                </Macro>
                <Macro Name="UserEvent 16,06" id="1025" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1025))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 6)" />
                </Macro>
                <Macro Name="UserEvent 16,07" id="1028">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1028))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 7)" />
                </Macro>
                <Macro Name="UserEvent 16,08" id="1031" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1031))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 8)" />
                </Macro>
                <Macro Name="UserEvent 16,11" id="1034">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1034))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 11)" />
                </Macro>
                <Macro Name="UserEvent 16,12" id="1037">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1037))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 12)" />
                </Macro>
                <Macro Name="UserEvent 16,13" id="1040">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1040))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 13)" />
                </Macro>
                <Macro Name="UserEvent 16,14" id="1043">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1043))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 14)" />
                </Macro>
                <Macro Name="UserEvent 16,15" id="1046">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1046))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 15)" />
                </Macro>
                <Macro Name="UserEvent 16,16" id="1049">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1049))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 16)" />
                </Macro>
                <Macro Name="UserEvent 16,17" id="1052">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1052))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 17)" />
                </Macro>
                <Macro Name="UserEvent 16,18" id="1055">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1055))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 18)" />
                </Macro>
                <Macro Name="UserEvent 16,21" id="1058">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1058))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 21)" />
                </Macro>
                <Macro Name="UserEvent 16,22" id="1061">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1061))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 22)" />
                </Macro>
                <Macro Name="UserEvent 16,23" id="1064">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1064))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 23)" />
                </Macro>
                <Macro Name="UserEvent 16,24" id="1067">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1067))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 24)" />
                </Macro>
                <Macro Name="UserEvent 16,25" id="1070">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1070))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 25)" />
                </Macro>
                <Macro Name="UserEvent 16,26" id="1073">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1073))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 26)" />
                </Macro>
                <Macro Name="UserEvent 16,27" id="1076">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1076))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 27)" />
                </Macro>
                <Macro Name="UserEvent 16,28" id="1079">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1079))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 28)" />
                </Macro>
                <Macro Name="UserEvent 16,31" id="1082" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1082))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 31)" />
                </Macro>
                <Macro Name="UserEvent 16,32" id="1085">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1085))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 32)" />
                </Macro>
                <Macro Name="UserEvent 16,33" id="1088">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1088))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 33)" />
                </Macro>
                <Macro Name="UserEvent 16,34" id="1091">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1091))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 34)" />
                </Macro>
                <Macro Name="UserEvent 16,35" id="1094">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1094))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 35)" />
                </Macro>
                <Macro Name="UserEvent 16,36" id="1097" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1097))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 36)" />
                </Macro>
                <Macro Name="UserEvent 16,37" id="1100">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1100))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 37)" />
                </Macro>
                <Macro Name="UserEvent 16,38" id="1103" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1103))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 38)" />
                </Macro>
                <Macro Name="UserEvent 16,41" id="1106">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1106))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 41)" />
                </Macro>
                <Macro Name="UserEvent 16,42" id="1109" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1109))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 42)" />
                </Macro>
                <Macro Name="UserEvent 16,43" id="1112" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1112))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 43)" />
                </Macro>
                <Macro Name="UserEvent 16,44" id="1115">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1115))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 44)" />
                </Macro>
                <Macro Name="UserEvent 16,45" id="1118">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1118))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 45)" />
                </Macro>
                <Macro Name="UserEvent 16,46" id="1121" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1121))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 46)" />
                </Macro>
                <Macro Name="UserEvent 16,47" id="1124">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1124))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 47)" />
                </Macro>
                <Macro Name="UserEvent 16,48" id="1127">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1127))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 48)" />
                </Macro>
                <Macro Name="UserEvent 16,51" id="1130">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1130))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 51)" />
                </Macro>
                <Macro Name="UserEvent 16,52" id="1133" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1133))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 52)" />
                </Macro>
                <Macro Name="UserEvent 16,53" id="1136" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1136))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 53)" />
                </Macro>
                <Macro Name="UserEvent 16,54" id="1139">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1139))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 54)" />
                </Macro>
                <Macro Name="UserEvent 16,55" id="1142">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1142))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 55)" />
                </Macro>
                <Macro Name="UserEvent 16,56" id="1145" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1145))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 56)" />
                </Macro>
                <Macro Name="UserEvent 16,57" id="1148">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1148))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 57)" />
                </Macro>
                <Macro Name="UserEvent 16,58" id="1151">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1151))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 58)" />
                </Macro>
                <Macro Name="UserEvent 16,61" id="1154">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1154))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 61)" />
                </Macro>
                <Macro Name="UserEvent 16,62" id="1157" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1157))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 62)" />
                </Macro>
                <Macro Name="UserEvent 16,63" id="1160" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1160))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 63)" />
                </Macro>
                <Macro Name="UserEvent 16,64" id="1163">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1163))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 64)" />
                </Macro>
                <Macro Name="UserEvent 16,65" id="1166">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1166))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 65)" />
                </Macro>
                <Macro Name="UserEvent 16,66" id="1169" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1169))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 66)" />
                </Macro>
                <Macro Name="UserEvent 16,67" id="1172">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1172))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 67)" />
                </Macro>
                <Macro Name="UserEvent 16,68" id="1175">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1175))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 68)" />
                </Macro>
                <Macro Name="UserEvent 16,71" id="1178">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 71)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1178))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,72" id="1181" Enabled="False">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 72)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1181))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,73" id="1184" Enabled="False">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 73)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1184))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,74" id="1187">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 74)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1187))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,75" id="1190">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 75)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1190))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,76" id="1193" Enabled="False">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 76)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1193))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,77" id="1196">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 77)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1196))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,78" id="1199">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 78)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1199))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,81" id="1202">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1202))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 81)" />
                </Macro>
                <Macro Name="UserEvent 16,82" id="1205">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1205))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 82)" />
                </Macro>
                <Macro Name="UserEvent 16,83" id="1208">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1208))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 83)" />
                </Macro>
                <Macro Name="UserEvent 16,84" id="1211">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1211))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 84)" />
                </Macro>
                <Macro Name="UserEvent 16,85" id="1214">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1214))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 85)" />
                </Macro>
                <Macro Name="UserEvent 16,86" id="1217">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1217))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 86)" />
                </Macro>
                <Macro Name="UserEvent 16,87" id="1220">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1220))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 87)" />
                </Macro>
                <Macro Name="UserEvent 16,88" id="1223">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1223))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 88)" />
                </Macro>
                <Macro Name="UserEvent 16,91" id="1226" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1226))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 91)" />
                </Macro>
                <Macro Name="UserEvent 16,92" id="1229" Enabled="False">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1229))
                    </Action>
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 92)" />
                </Macro>
                <Macro Name="UserEvent 16,93" id="1232" Enabled="False">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 93)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1232))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,94" id="1235">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 94)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1235))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,95" id="1238">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 95)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1238))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,96" id="1241" Enabled="False">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 96)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1241))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,97" id="1244">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 97)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1244))
                    </Action>
                </Macro>
                <Macro Name="UserEvent 16,98" id="1247">
                    <Event Name="Unit5.OUTPUT: IR, (UserEvent 16, 98)" />
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1247))
                    </Action>
                </Macro>
            </Folder>
            <Folder Name="Preparations">
                <Macro Name="run all preparations">
                    <Event Name="Main.Case16 initialize" />
                    <Action>
                        EventGhost.NewJumpIf(XmlIdLink(1257), 2, True)
                    </Action>
                    <Action>
                        EventGhost.NewJumpIf(XmlIdLink(1270), 2, True)
                    </Action>
                    <Action>
                        EventGhost.NewJumpIf(XmlIdLink(1357), 2, True)
                    </Action>
                    <Action>
                        EventGhost.NewJumpIf(XmlIdLink(1438), 2, True)
                    </Action>
                </Macro>
                <Macro Name="Preparations" id="1257" Expanded="True">
                    <Action Name="Prepare for testing">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'Unit 4, 10;')
                    </Action>
                    <Action>
                        Serial2.Write(u'Unit 5,10;')
                    </Action>
                    <Action>
                        EventGhost.Wait(5.0)
                    </Action>
                    <Action>
                        Serial.Write(u'EventListErase;')
                    </Action>
                    <Action>
                        Serial2.Write(u'EventlistErase;')
                    </Action>
                    <Action>
                        Serial.Write(u'trace off;')
                    </Action>
                    <Action>
                        Serial2.Write(u'trace off;')
                    </Action>
                    <Action>
                        Serial.Write(u'WaitFreeRF All,5;')
                    </Action>
                    <Action>
                        Serial2.Write(u'WaitFreeRF All,10;')
                    </Action>
                    <Action>
                        Serial.Write(u'TransmitSettings IR&amp;RF;')
                    </Action>
                    <Action>
                        Serial2.Write(u'TransmitSettings IR&amp;RF;')
                    </Action>
                </Macro>
                <Macro Name="Program eventlists" id="1270" Expanded="True">
                    <Action>
                        Serial.Write(u'EventListErase;')
                    </Action>
                    <Action>
                        Serial2.Write(u'EventlistErase;')
                    </Action>
                    <Action Name="Although all permutations are in this list, only the valid ones are enabled." Enabled="False">
                        EventGhost.Comment()
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard All,All; SendUserEvent 16,1;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard All,KAKU; SendUserEvent 16,2;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard All,NewKAKU; SendUserEvent 16,3;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard All,Error; SendUserEvent 16,4;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard All,OK; SendUserEvent 16,5;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard All,UserEvent; SendUserEvent 16,6;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard All,OtherUnit; SendUserEvent 16,7;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard All,Unknown; SendUserEvent 16,8;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard IR,All;SendUserEvent 16,11;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard IR,KAKU;SendUserEvent 16,12;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard IR,NewKAKU;SendUserEvent 16,13;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard IR,Error;SendUserEvent 16,14;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard IR,OK;SendUserEvent 16,15;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard IR,UserEvent;SendUserEvent 16,16;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard IR,OtherUnit;SendUserEvent 16,17;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard IR,Unknown;SendUserEvent 16,18;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard RF,All;SendUserEvent 16,21;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard RF,KAKU;SendUserEvent 16,22;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard RF,NewKAKU;SendUserEvent 16,23;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard RF,Error;SendUserEvent 16,24;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard RF,OK;SendUserEvent 16,25;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard RF,UserEvent;SendUserEvent 16,26;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard RF,OtherUnit;SendUserEvent 16,27;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard RF,Unknown;SendUserEvent 16,28;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Serial,All;SendUserEvent 16,31;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Serial,KAKU;SendUserEvent 16,32;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Serial,NewKAKU;SendUserEvent 16,33;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Serial,Error;SendUserEvent 16,34;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Serial,OK;SendUserEvent 16,35;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Serial,UserEvent;SendUserEvent 16,36;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Serial,OtherUnit;SendUserEvent 16,37;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Serial,Unknown;SendUserEvent 16,38;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Wired,All;SendUserEvent 16,41;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Wired,KAKU;SendUserEvent 16,42;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Wired,NewKAKU;SendUserEvent 16,43;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Wired,Error;SendUserEvent 16,44;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Wired,OK;SendUserEvent 16,45;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Wired,UserEvent;SendUserEvent 16,46;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Wired,OtherUnit;SendUserEvent 16,47;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Wired,Unknown;SendUserEvent 16,48;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Clock,All;SendUserEvent 16,51;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Clock,KAKU;SendUserEvent 16,52;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Clock,NewKAKU;SendUserEvent 16,53;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Clock,Error;SendUserEvent 16,54;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Clock,OK;SendUserEvent 16,55;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Clock,UserEvent;SendUserEvent 16,56;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Clock,OtherUnit;SendUserEvent 16,57;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Clock,Unknown;SendUserEvent 16,58;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Timers,All;SendUserEvent 16,61;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Timers,KAKU;SendUserEvent 16,62;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Timers,NewKAKU;SendUserEvent 16,63;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Timers,Error;SendUserEvent 16,64;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Timers,OK;SendUserEvent 16,65;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Timers,UserEvent;SendUserEvent 16,66;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Timers,OtherUnit;SendUserEvent 16,67;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Timers,Unknown;SendUserEvent 16,68;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Variables,All;SendUserEvent 16,71;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Variables,KAKU;SendUserEvent 16,72;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Variables,NewKAKU;SendUserEvent 16,73;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Variables,Error;SendUserEvent 16,74;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Variables,OK;SendUserEvent 16,75;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Variables,UserEvent;SendUserEvent 16,76;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Variables,OtherUnit;SendUserEvent 16,77;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Variables,Unknown;SendUserEvent 16,78;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Eventlist,All;SendUserEvent 16,81;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Eventlist,KAKU;SendUserEvent 16,82;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Eventlist,NewKAKU;SendUserEvent 16,83;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Eventlist,Error;SendUserEvent 16,84;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Eventlist,OK;SendUserEvent 16,85;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Eventlist,UserEvent;SendUserEvent 16,86;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Eventlist,OtherUnit;SendUserEvent 16,87;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard Eventlist,Unknown;SendUserEvent 16,88;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard System,All;SendUserEvent 16,91;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard System,KAKU;SendUserEvent 16,92;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard System,NewKAKU;SendUserEvent 16,93;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard System,Error;SendUserEvent 16,94;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard System,OK;SendUserEvent 16,95;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard System,UserEvent;SendUserEvent 16,96;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard System,OtherUnit;SendUserEvent 16,97;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;WildCard System,Unknown;SendUserEvent 16,98;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;UserEvent 16,200; UserEvent 16,255;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;UserEvent 16,201; SendKAKU A1, off;')
                    </Action>
                    <Action>
                        Serial.Write(u'EventlistWrite;UserEvent 16,255; 0xBC001199;')
                    </Action>
                </Macro>
                <Macro Name="Reset test status indicators" id="1357">
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1010))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1013))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1016))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1019))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1022))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1025))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1028))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1031))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1034))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1037))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1040))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1043))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1046))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1049))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1052))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1055))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1058))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1061))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1064))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1067))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1070))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1073))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1076))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1079))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1082))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1085))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1088))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1091))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1094))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1097))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1100))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1103))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1106))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1109))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1112))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1115))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1118))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1121))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1124))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1127))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1130))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1133))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1136))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1139))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1142))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1145))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1148))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1151))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1154))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1157))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1160))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1163))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1166))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1169))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1172))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1175))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1178))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1181))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1184))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1187))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1190))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1193))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1196))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1199))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1202))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1205))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1208))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1211))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1214))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1217))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1220))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1223))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1226))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1229))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1232))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1235))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1238))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1241))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1244))
                    </Action>
                    <Action>
                        EventGhost.EnableItem(XmlIdLink(1247))
                    </Action>
                </Macro>
                <Macro Name="Disable excluded status indicators" id="1438">
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1109))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1112))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1121))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1133))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1136))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1145))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1157))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1160))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1169))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1181))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1184))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1193))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1229))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1232))
                    </Action>
                    <Action>
                        EventGhost.DisableItem(XmlIdLink(1241))
                    </Action>
                </Macro>
            </Folder>
        </Folder>
        <Folder Name="Test case 17: test simple IR send/receive routines">
            <Macro Name="Serial Port: Write Data: EventlistErase;">
                <Action>
                    Serial.Write(u'EventlistErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 17,1;Sound 2,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 17,2;Sound 3,1;')
                </Action>
            </Macro>
            <Folder Name='Simply "learn" UserEvents into Harmony using Harmony software'>
                <Macro Name="Learn UserEvent signals into the Harmony remote">
                    <Action>
                        Serial.Write(u'SendUserEvent 17,1;')
                    </Action>
                    <Action>
                        Serial.Write(u'SendUserEvent 17,2;')
                    </Action>
                </Macro>
                <Macro Name="Detect signals from Harmony remote">
                    <Event Name="Unit5.INPUT: IR, Event, (UserEvent 17, 1)" />
                    <Action>
                        EventGhost.ShowOSD(u'UserEvent 17.1 detected', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                    </Action>
                </Macro>
                <Macro Name="Detect signals from Harmony remote">
                    <Event Name="Unit5.INPUT: IR, Event, (UserEvent 17, 2)" />
                    <Action>
                        EventGhost.ShowOSD(u'UserEvent 17.2\n detected', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                    </Action>
                </Macro>
                <Folder Name="Learn KAKU signal into Harmony using RawSignalCopy, then reverse">
                    <Macro Name="Learn KAKU A1, on into Harmony via RawSignalCopy">
                        <Action>
                            Serial.Write(u'RawSignalCopy RF2IR,15;')
                        </Action>
                    </Macro>
                    <Macro Name="Pickup KAKU A1, on from Harmony and send out via RawSignalCopy;">
                        <Action>
                            Serial.Write(u'RawSignalCopy IR2RF,5;')
                        </Action>
                    </Macro>
                </Folder>
            </Folder>
        </Folder>
        <Folder Name="Test case 18: test rawsignal get/put (not completed)" Enabled="False">
            <Macro Name="Serial Port: Write Data: EventlistErase;">
                <Action>
                    Serial.Write(u'EventlistErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 17,1;Sound 2,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 17,2;Sound 3,1;')
                </Action>
            </Macro>
            <Macro Name="Learn UserEvent signals into the Harmony remote">
                <Action>
                    Serial.Write(u'RawSignalGet;')
                </Action>
                <Action>
                    Serial.Write(u'RawSignalPut (3082, 306, 1582, 306, 605, 301, 605, 301, 579, 326, 580, 300, 605, 301, 579, 326, 580, 300, 1587, 327, 579, 327, 579, 326, 554, 326, 1587, 327, 553, 326, 606, 300, 580, 326, 579, 327, 553, 326, 1588, 326, 579, 307, 599, 307, 1581, 306, 1608, 306, 573, 333, 573, 333, 547, 332, 574, 332, 573, 333, 573, 332, 1556, 332, 573, 333, 1555, 0);')
                </Action>
                <Action>
                    Serial.Write(u'SendUserEvent 17,2;')
                </Action>
            </Macro>
            <Macro Name="Detect signals from Harmony remote">
                <Event Name="Unit5.INPUT: IR, Event, (UserEvent 17, 1)" />
                <Action>
                    EventGhost.ShowOSD(u'UserEvent 17.1 detected', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
            </Macro>
            <Macro Name="Detect signals from Harmony remote">
                <Event Name="Unit5.INPUT: IR, Event, (UserEvent 17, 2)" />
                <Action>
                    EventGhost.ShowOSD(u'UserEvent 17.2\n detected', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 19: test Nodo as a repeater" Expanded="True">
            <Macro Name="Test case 19: test Nodo as a repeater" Expanded="True">
                <Action>
                    Serial.Write(u'WaitFreeRF All,5;')
                </Action>
                <Action>
                    Serial2.Write(u'WaitFreeRF All,10;')
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings IR&amp;RF;')
                </Action>
                <Action>
                    Serial2.Write(u'TransmitSettings IR&amp;RF;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WildCard All,All; delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WildCard IR,KAKU; SendRawSignal;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WildCard RF,KAKU; SendRawSignal;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WildCard IR,UserEvent; SendRawSignal;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WildCard RF,UserEvent; SendRawSignal;')
                </Action>
                <Action Name="Press any KAKU remote button to see if repeater works">
                    EventGhost.Comment()
                </Action>
                <Action Name="Send KAKU command from Harmony remote">
                    EventGhost.Comment()
                </Action>
            </Macro>
            <Macro Name="Serial Port #2: Write Data: Divert 4; SendKAKU A1,off;" Expanded="True">
                <Action>
                    Serial2.Write(u'SendUserEvent 19,1;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 20: test out-of-the-box Nodo" Expanded="True">
            <Macro Name="Test case 20: test out-of-the-box Nodo" Expanded="True">
                <Action>
                    Serial.Write(u'Reset;')
                </Action>
                <Action Name="generate KAKU commands from the Harmony remote: IR==&gt;RF KAKU conversion">
                    EventGhost.Comment()
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Workarea">
            <Macro Name="Status">
                <Event Name="Mouse.MiddleButton" />
                <Action>
                    EventGhost.TriggerEvent(u'Status-serial1', 0.0)
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'Status-serial2', 2.0)
                </Action>
            </Macro>
            <Macro Name="Status-serial1">
                <Event Name="Main.Status-serial1" />
                <Action>
                    Serial.Write(u'EventlistShow;')
                </Action>
            </Macro>
            <Macro Name="Status-serial2">
                <Event Name="Main.Status-serial2" />
                <Action>
                    Serial2.Write(u'EventlistShow;')
                </Action>
            </Macro>
            <Macro Name="Send UE signals">
                <Action>
                    Serial.Write(u'SendUserEvent 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'SendUserEvent 1,2;')
                </Action>
            </Macro>
        </Folder>
    </Folder>
</EventGhost>
