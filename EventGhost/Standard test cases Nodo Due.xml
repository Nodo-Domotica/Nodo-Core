<?xml version="1.0" encoding="UTF-8" ?>
<EventGhost Name="Configuration Tree" Expanded="True" Version="1462" Guid="{88EEA411-E7A6-47C8-B071-3C7CE791D0C1}" Time="1289246153.88">
    <Autostart Name="Autostart">
        <Action>
            EventGhost.ShowOSD(u'EventGhost with \nstandard testcases \nfor Nodo Due', u'0;-64;0;0;0;400;255;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 5.0, False)
        </Action>
        <Plugin File="Serial" Identifier="Serial">
            gAIoSwdNAEtLA0sASwBLAYhYAgAAAFxucQBYBQAAAFVuaXQ1cQFLAHRxAi4=
        </Plugin>
        <Plugin Enabled="False" File="Serial" Identifier="Serial2">
            gAIoSwdNAEtLA0sASwBLAYhYAgAAAFxucQBYBQAAAFVuaXQ2cQFLAHRxAi4=
        </Plugin>
        <Plugin File="Timer" Identifier="Timer">
            gAIpLg==
        </Plugin>
        <Plugin File="Scheduler" Identifier="Scheduler">
            gAJYIgAAADAxMDEsMDUwMSwwNjA2LDEyMjQsMTIyNSwxMjI2LDEyMzFxAFgAAAAAcQGJh3ECLg==
        </Plugin>
    </Autostart>
    <Folder Name="Standard test cases" Expanded="True">
        <Folder Name="Test case 0: set unit numbers and basic settings">
            <Macro Name="Try setting unit numbers from 0 to 16">
                <Action>
                    Serial.Write(u'Unit 0;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 1;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 2;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 10;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 11;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 12;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 13;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 14;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 15;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 16;')
                </Action>
            </Macro>
            <Macro Name="Try setting home addresses 0 and 11">
                <Action>
                    Serial.Write(u'Unit 1, 1;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 4, 0;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 4, 5;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 4, 11;')
                </Action>
            </Macro>
            <Macro Name="Try invalid TransMitSettings">
                <Action Name="valid:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings RF;')
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings IR;')
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings IR&amp;RF;')
                </Action>
                <Action Name="invalid:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings Anything;')
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings RF&amp;IR;')
                </Action>
            </Macro>
            <Macro Name="Restore proper settings for further testing">
                <Action>
                    Serial.Write(u'Reset;')
                </Action>
                <Action>
                    Serial2.Write(u'Reset;')
                </Action>
                <Action>
                    Serial.Write(u'Unit 4, 10;')
                </Action>
                <Action>
                    Serial2.Write(u'Unit 5,10;')
                </Action>
                <Action>
                    EventGhost.Wait(3.0)
                </Action>
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial2.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'WaitFreeRF Series,5;')
                </Action>
                <Action>
                    Serial2.Write(u'WaitFreeRF Series,10;')
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings IR&amp;RF;')
                </Action>
                <Action>
                    Serial2.Write(u'TransmitSettings IR&amp;RF;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 1: Set 8 UserEvents to generate sounds">
            <Macro Name="Test case 1: Set 8 UserEvents to generate sounds">
                <Action Name="Install EventList">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistErase ;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,1; Sound 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,2; Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,3; Sound 3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,4; Sound 4;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,5; Sound 5;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,6; Sound 6;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,7; Sound 7;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,8; Sound 8;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,4;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,5;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,6;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,7;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 1,0; UserEvent 1,8;')
                </Action>
                <Action Name="Show EventList">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventListShow;')
                </Action>
                <Action Name="Test individual sounds">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,2;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,3;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,4;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,5;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,6;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,7;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,8;')
                </Action>
                <Action Name="Auto-generate all sounds">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 1,0;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 2: test WiredIn and WiredOut">
            <Macro Name="Test case 2: test WiredIn and WiredOut">
                <Action Name="Install EventList">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistErase ;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 1,1; WiredOut 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 2,1; WiredOut 2,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 3,1; WiredOut 3,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 4,1; WiredOut 4,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 1,1; Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 2,1; Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 3,1; Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 4,1; Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 1,0; WiredOut 1,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 2,0; WiredOut 2,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 3,0; WiredOut 3,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 4,0; WiredOut 4,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 1,0; Sound 3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 2,0; Sound 3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 3,0; Sound 3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WiredIn 4,0; Sound 3;')
                </Action>
                <Action Name="Test individual ports: shortcircuit input port one by one with a jumper">
                    EventGhost.Comment()
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 3: set and show clock on local and remote Nodo">
            <Macro Name="Test case 3: set and show clock on serially connected Nodo">
                <Action Name="Set clock to Sunday 10-07-2005, 15.30, DLS on">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'ClockSetDate 5,11;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetYear 20,10;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetDOW 6;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetTime 17, 19;')
                </Action>
                <Action Name="Now show current clock setting">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetYear;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetDate;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetTime;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetDOW;')
                </Action>
            </Macro>
            <Macro Name="Test case 3: set and show clock on remote connected Nodo">
                <Action Name="Set clock to Sunday 10-07-2005, 15.30, DLS on">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;ClockSetDate 5,11;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;ClockSetYear 18,10;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;ClockSetYear 20,10;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;ClockSetTime 17, 39;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;ClockSetDOW 6;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;ClockSetDOW 2;')
                </Action>
                <Action Name="Now show current clock setting">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;SendStatus ClockSetYear;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ClockSetDate;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;SendStatus ClockSetTime;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5;SendStatus ClockSetDOW;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name='Test case 4: send and receive "old" KAKU signals'>
            <Macro Name='Test case 4: send and receive "old" KAKU signals'>
                <Action Name="Install EventList">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistErase ;')
                </Action>
                <Action Name="Send KAKU A1 on and off">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, ON; SendKAKU A1, ON;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, ON; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, ON; SendKAKU A1, off;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, ON; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, ON; SendKAKU A1, ON;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, OFF; SendKAKU A1, Off;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, Off; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, OFF; SendKAKU A1, On;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, Off; Delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, OFF; SendKAKU A1, Off;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; KAKU A2, OFF; SendUserEvent 4,99;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 10,10; SendUserEvent 4,99;')
                </Action>
                <Action>
                    Serial.Write(u'trace on;')
                </Action>
                <Action Name="Now press A2 on and off to test">
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'Press A2 ON to test "ON" sequence\nPress A2 OFF to test "OFF" sequence', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 5.0, False)
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 5: test timers">
            <Macro Name="Test case 5: test timers">
                <Action Name="Install EventList">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistErase ;')
                </Action>
                <Action Name="Valid timers:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; TimerSet 1, 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; TimerSet 2, 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; TimerSet 3, 3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; TimerSet 15, 5;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; Delay 2;')
                </Action>
                <Action Name="Invalid timers:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; TimerSet 0, 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; UserEvent 5,0; TimerSet 16, 5;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; Timer 1; Sound 1, 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; Timer 2; Sound 1, 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite; Timer 3; Sound 1, 3;')
                </Action>
                <Action Name="Now trigger the timer sequence">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 5,0;')
                </Action>
                <Action Name="Please wait 3 seconds for all timers to expire">
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'Please wait for all timers to expire', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'ShowTimerSet', 0.0)
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'ResetTimer2', 50.0)
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'ShowTimerSet', 60.0)
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'ShowTimerSet', 120.0)
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'Please wait until you see text "DONE"', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
            </Macro>
            <Macro Name="Show TimerSet">
                <Event Name="Main.ShowTimerSet" />
                <Action>
                    EventGhost.ShowOSD(u'Current Timer Settings:', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'Status TimerSet 0;Status TimerSet 1;Status TimerSet 2;Status TimerSet 3; Status Timerset 15; Status TimerSet 16;')
                </Action>
            </Macro>
            <Macro Name="Reset timer2">
                <Event Name="Main.ResetTimer2" />
                <Action>
                    EventGhost.ShowOSD(u'Cancelling timer2!', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'TimerReset 2;')
                </Action>
            </Macro>
            <Macro Name="Timer 1 expires">
                <Event Name="Unit5.INPUT: Timers, Event, (Timer 1, 0)" />
                <Action>
                    EventGhost.ShowOSD(u'Timer 1 has expired!', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
            </Macro>
            <Macro Name="Timer 3 expires">
                <Event Name="Unit5.INPUT: Timers, Event, (Timer 3, 0)" />
                <Action>
                    EventGhost.ShowOSD(u'Timer 3 has expired!', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'ShowRandomTimerSet', 0.0)
                </Action>
            </Macro>
            <Macro Name="Show RandomTimerSettings">
                <Event Name="Main.ShowRandomTimerSet" />
                <Action>
                    EventGhost.ShowOSD(u'Demonstrate random timer settings', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'TimerRandom 1, 5;TimerRandom 2, 50;TimerRandom 3, 500;')
                </Action>
                <Action>
                    Serial.Write(u'Status TimerSet 1;Status TimerSet 2;Status TimerSet 3;')
                </Action>
                <Action>
                    Serial.Write(u'TimerRandom 1, 5;TimerRandom 2, 50;TimerRandom 3, 500;')
                </Action>
                <Action>
                    Serial.Write(u'Status TimerSet 1;Status TimerSet 2;Status TimerSet 3;')
                </Action>
                <Action>
                    Serial.Write(u'TimerRandom 1, 5;TimerRandom 2, 50;TimerRandom 3, 500;')
                </Action>
                <Action>
                    Serial.Write(u'Status TimerSet 1;Status TimerSet 2;Status TimerSet 3;')
                </Action>
                <Action>
                    Serial.Write(u'TimerReset 1;TimerReset 2;TimerReset 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status TimerSet 1;Status TimerSet 2;Status TimerSet 3;')
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'DONE', u'0;-96;0;0;0;700;0;1;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 5.0, False)
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 6: test variables">
            <Macro Name="Test case 6: test variables">
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 6,0;VariableClear 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 6,0;VariableSet 2,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;KAKU A1, on;VariableInc 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;KAKU A1, on;SendUserEvent  6,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;KAKU A1, off;VariableDec 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;KAKU A1, off;SendUserEvent  6,2;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;Variable 1,5;VariableInc 2,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;Variable 1,5;UserEvent 6,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;Variable 1,5;VariableSet 1,0;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 6,0;')
                </Action>
                <Action>
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'press A1 on to increment Var1,\npress A1 off to decrement Var1.', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
            </Macro>
            <Macro Name="Variable has been increased">
                <Event Name="Unit5.INPUT: EventList, (SendUserEvent 6, 1)" />
                <Action>
                    EventGhost.ShowOSD(u'Increased!', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1; Status VariableSet,2;')
                </Action>
                <Action>
                    Serial.Write(u'VariableClear;')
                </Action>
            </Macro>
            <Macro Name="Variable has been decreased">
                <Event Name="Unit5.INPUT: EventList, (SendUserEvent 6, 2)" />
                <Action>
                    EventGhost.ShowOSD(u'Decreased!', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1; Status VariableSet,2;')
                </Action>
            </Macro>
            <Macro Name="Reset 1, increase 2">
                <Event Name="Unit5.INPUT: EventList, (UserEvent 6, 3)" />
                <Action>
                    EventGhost.ShowOSD(u'Var1 reached value 5:\n* var2 increased\n* var1 reset to 0', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 3.0, False)
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet,1; Status VariableSet,2;')
                </Action>
            </Macro>
            <Macro Name="Play around with some variable statements">
                <Action>
                    Serial.Write(u'Status VariableSet 4;')
                </Action>
                <Action>
                    Serial.Write(u'VariableClear 4;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet 4;')
                </Action>
                <Action>
                    Serial.Write(u'VariableClear 0;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet 4;')
                </Action>
                <Action>
                    Serial.Write(u'VariableInc 4;')
                </Action>
                <Action>
                    Serial.Write(u'VariableInc 4,0;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet 4;')
                </Action>
                <Action>
                    Serial.Write(u'VariableInc 4, 15')
                </Action>
                <Action>
                    Serial.Write(u'VariableDec 4;')
                </Action>
                <Action>
                    Serial.Write(u'VariableDec 4, 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet 4;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 7: test TransmitSettings">
            <Macro Name="Test case 7: test TransmitSettings">
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,1;VariableSet 1,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,2;VariableInc 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 7,3;SenduserEvent 7,99;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;Variable 1,1; Sound 2;')
                </Action>
                <Action>
                    Serial.Write(u'EventListShow;')
                </Action>
            </Macro>
            <Macro Name="All TransmitSettings permutations">
                <Action Name="Best way to test: manually invoke the lines below with F5">
                    EventGhost.Comment()
                </Action>
                <Action Name="Note: UserEvent 7.1/7.2 will generate an event, but that should NOT go out on IR and/or RF">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'trace on;')
                </Action>
                <Action Name="Events to IR">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings IR;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,1;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,2;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,3;')
                </Action>
                <Action Name="Events to RF">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings RF;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,1;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,2;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,3;')
                </Action>
                <Action Name="Events to IR&amp;RF">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'TransmitSettings IR&amp;RF;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,1;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,2;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 7,3;')
                </Action>
                <Action Name=" ">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'trace off;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 8: test command sourcing">
            <Macro Name="Test case 8: test command sourcing">
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;KAKU A3, on;SendUserEvent  8,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 8,2;SendUserEvent  8,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistShow;')
                </Action>
                <Action Name="Press A3 on to trigger first line, or send UserEvent 8.2">
                    EventGhost.Comment()
                </Action>
            </Macro>
            <Macro Name="test triggers">
                <Action>
                    Serial.Write(u'SendKAKU A3, on;')
                </Action>
                <Action>
                    Serial.Write(u'KAKU A3, on;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 8,2;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 9: test automatic DLS switchover">
            <Macro Name="Test DLS switchover: 28-03-2010">
                <Action>
                    Serial.Write(u'ClockSetDate 10,4;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetDate 28,3;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetYear 20,10;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetTime 1,59;')
                </Action>
                <Action Name="Time before DLS switchover:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 67.0, False)
                </Action>
                <Action Name="Time after DLS switchover:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'Case9_Show_Time', 70.0)
                </Action>
                <Action>
                    Serial.Write(u'ClockSetDate 8,1;')
                </Action>
            </Macro>
            <Macro Name="Test DLS switchover: 31-10-2010">
                <Action>
                    Serial.Write(u'ClockSetDate 31,10;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetYear 20,10;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetTime 1,59;')
                </Action>
                <Action Name="Time before DLS switchover:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                </Action>
                <Action Name="Time after DLS switchover:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'Case9_Show_Time', 65.0)
                </Action>
            </Macro>
            <Macro Name="Test DLS switchover: 27-03-2011">
                <Action>
                    Serial.Write(u'ClockSetDate 27,3;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetYear 20,11;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetTime 1,59;')
                </Action>
                <Action Name="Time before DLS switchover:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                </Action>
                <Action>
                    EventGhost.ShowOSD(u'Please wait 1 minute for DLS toggle to happen', u'0;-48;0;0;0;700;0;0;0;0;3;2;1;34;Arial', (0, 0, 255), None, 4, (0, 0), 0, 59.0, False)
                </Action>
                <Action Name="Time after DLS switchover:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'Case9_Show_Time', 65.0)
                </Action>
            </Macro>
            <Macro Name="Restore current date/time">
                <Action>
                    Serial.Write(u'ClockSetDate 8,11;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetYear 20,10;')
                </Action>
                <Action>
                    Serial.Write(u'ClockSetTime 14,59;')
                </Action>
                <Action Name="Time before DLS switchover:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    EventGhost.TriggerEvent(u'Case9_Show_Time', 0.0)
                </Action>
            </Macro>
            <Macro Name="ShowTime">
                <Event Name="Main.Case9_Show_Time" />
                <Action Name="Show current date/time">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetYear;Status ClockSetDate;Status ClockSetTime;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 10: test Status &amp; SendStatus output">
            <Macro Name="Test case 10: test Status output">
                <Action Name="Valid:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status ClockDaylight;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetDate;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetTime;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetYear;')
                </Action>
                <Action>
                    Serial.Write(u'Status ClockSetDOW;')
                </Action>
                <Action>
                    Serial.Write(u'Status TransmitSettings;')
                </Action>
                <Action>
                    Serial.Write(u'Status Simulate;')
                </Action>
                <Action>
                    Serial.Write(u'Status TimerSet 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status Trace;')
                </Action>
                <Action>
                    Serial.Write(u'Status Unit;')
                </Action>
                <Action>
                    Serial.Write(u'Status VariableSet 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WaitFreeRF;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredOut 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredOut 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredOut 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredOut 4;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredAnalog 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredAnalog 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredAnalog 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredAnalog 4;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredIn 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredIn 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredIn 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredIn 4;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup 4;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger 4;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold 1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold 2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold 3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold 4;')
                </Action>
                <Action Name="obsolete, should be invalid">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status Home;')
                </Action>
                <Action>
                    Serial.Write(u'Status ReceiveRepeatsIR;')
                </Action>
                <Action>
                    Serial.Write(u'Status ReceiveRepeatsRF;')
                </Action>
            </Macro>
            <Macro Name="Test case 10: test SendStatus output">
                <Action Name="Valid:">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ClockDaylight;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ClockSetDate;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ClockSetTime;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ClockSetYear;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ClockSetDOW;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus TransmitSettings;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus Simulate;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus TimerSet 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus Trace;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus Unit;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus VariableSet 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WaitFreeRF;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredOut 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredOut 2;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredOut 3;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredOut 4;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredAnalog 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredAnalog 2;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredAnalog 3;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredAnalog 4;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredIn 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredIn 2;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredIn 3;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredIn 4;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredPullup 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredPullup 2;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredPullup 3;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredPullup 4;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredSmittTrigger 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredSmittTrigger 2;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredSmittTrigger 3;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredSmittTrigger 4;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredThreshold 1;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredThreshold 2;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredThreshold 3;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus WiredThreshold 4;')
                </Action>
                <Action Name="obsolete, should be invalid">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus Home;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ReceiveRepeatsIR;')
                </Action>
                <Action>
                    Serial.Write(u'Divert 5; SendStatus ReceiveRepeatsRF;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 11: test WaitFreeRF on series or all">
            <Macro Name="Test case 11: test WaitFreeRF on series or all">
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, ON;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, ON;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, ON;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 11,1;SendKAKU A1, OFF;')
                </Action>
                <Action>
                    Serial.Write(u'EventListShow;')
                </Action>
            </Macro>
            <Macro Name="Trigger series with various WaitFreeRF settings">
                <Action>
                    Serial.Write(u'WaitFreeRF Off;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 11,1;')
                </Action>
                <Action>
                    Serial.Write(u'WaitFreeRF Series;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 11,1;')
                </Action>
                <Action>
                    Serial.Write(u'WaitFreeRF All;')
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 11,1;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 12: test Break statements">
            <Macro Name="Test case 12: test Break statements">
                <Action>
                    Serial.Write(u'EventListErase;')
                </Action>
                <Action Name="UE 12.0: reset all variables to 0">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,0;VariableSet 1,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,0;VariableSet 2,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,0;VariableSet 3,0;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,0;VariableSet 4,0;')
                </Action>
                <Action Name="UE 12.1: increment var1, break if equal to 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,1;VariableInc 1,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,1;BreakOnVarEqu 1,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,1;Sound 1,1;')
                </Action>
                <Action Name="UE 12.2: increment var2, break if less than 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,2;VariableInc 2,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,2;BreakOnVarLess 2,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,2;Sound 2,1;')
                </Action>
                <Action Name="UE 12.3: increment var3, break if more than 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,3;VariableInc 3,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,3;BreakOnVarMore 3,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,3;Sound 3,1;')
                </Action>
                <Action Name="UE 12.4: increment var4, break if not equal to 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,4;VariableInc 4,1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,4;BreakOnVarNEqu 4,3;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;UserEvent 12,4;Sound 4,1;')
                </Action>
                <Action Name="End of EventList: delay 1 sec and play short sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WildCard Serial, All;delay 1;')
                </Action>
                <Action>
                    Serial.Write(u'EventlistWrite;WildCard Serial, All;Sound 8,1;')
                </Action>
            </Macro>
            <Macro Name="Serial Port: Write Data: ">
                <Action>
                    Serial.Write(u'Status VariableSet,1; Status VariableSet,2; Status VariableSet,3; Status VariableSet,4;')
                </Action>
                <Action Name="UE 12.0: reset all variables to 0">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 12,0;')
                </Action>
                <Action Name="UE 12.1: increment var1, break if equal to 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 12,1;')
                </Action>
                <Action Name="UE 12.2: increment var2, break if less than 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 12,2;')
                </Action>
                <Action Name="UE 12.3: increment var3, break if more than 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 12,3;')
                </Action>
                <Action Name="UE 12.4: increment var4, break if not equal to 3, then play sound">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'UserEvent 12,4;')
                </Action>
            </Macro>
        </Folder>
        <Folder Name="Test case 13: test WiredPullup and WiredSmittTrigger">
            <Macro Name="Test case 13: test WiredPullup and WiredSmittTrigger" Expanded="True">
                <Action Name="Set some settings">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'WiredPullup 1, 1;')
                </Action>
                <Action>
                    Serial.Write(u'WiredPullup 2, 0;')
                </Action>
                <Action>
                    Serial.Write(u'WiredPullup 3, 1;')
                </Action>
                <Action>
                    Serial.Write(u'WiredPullup 4, 0;')
                </Action>
                <Action>
                    Serial.Write(u'WiredSmittTrigger 1, 15;')
                </Action>
                <Action>
                    Serial.Write(u'WiredSmittTrigger 2, 25;')
                </Action>
                <Action>
                    Serial.Write(u'WiredSmittTrigger 3, 35;')
                </Action>
                <Action>
                    Serial.Write(u'WiredSmittTrigger 4, 45;')
                </Action>
                <Action>
                    Serial.Write(u'WiredThreshold 1, 110;')
                </Action>
                <Action>
                    Serial.Write(u'WiredThreshold 2, 120;')
                </Action>
                <Action>
                    Serial.Write(u'WiredThreshold 3, 130;')
                </Action>
                <Action>
                    Serial.Write(u'WiredThreshold 4,140;')
                </Action>
                <Action Name="show WiredPullups">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup,1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup,2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup,3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredPullup,4;')
                </Action>
                <Action Name="show WiredSmittTrigger">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger,1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger,2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger,3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredSmittTrigger,4;')
                </Action>
                <Action Name="show WiredThreshold">
                    EventGhost.Comment()
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold,1;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold,2;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold,3;')
                </Action>
                <Action>
                    Serial.Write(u'Status WiredThreshold,4;')
                </Action>
            </Macro>
        </Folder>
    </Folder>
    <Folder Name="work area">
        <Macro Name="Set DivertSettings">
            <Action>
                Serial.Write(u'divert 5; sound 4; sound 4;')
            </Action>
            <Action>
                Serial.Write(u'divert 5; ClockSetDOW 9;')
            </Action>
            <Action>
                Serial.Write(u'SendKAKU P15, on;')
            </Action>
            <Action>
                Serial.Write(u'SendKAKU P12, on;')
            </Action>
            <Action>
                Serial.Write(u'SendKAKU P15, off;')
            </Action>
            <Action>
                Serial.Write(u'SendKAKU P12, off;')
            </Action>
            <Action>
                Serial.Write(u'DivertSettings 0,0;')
            </Action>
            <Action>
                Serial.Write(u'DivertSettings 0,1;')
            </Action>
            <Action>
                Serial.Write(u'DivertSettings 0,2;')
            </Action>
            <Action>
                Serial.Write(u'DivertSettings All,RF&amp;IR;')
            </Action>
            <Action>
                Serial.Write(u'DivertSettings All,IR&amp;RF;')
            </Action>
            <Action>
                Serial2.Write(u'DivertSettings All,IR&amp;RF;')
            </Action>
        </Macro>
        <Macro Name="Serial Port: Write Data: EventListShow;">
            <Event Name="Mouse.MiddleButton" />
            <Action>
                Serial.Write(u'EventListShow;')
            </Action>
            <Action>
                Serial2.Write(u'EventListShow;')
            </Action>
        </Macro>
        <Macro Name="Serial Port: Write Data: trace on;">
            <Action>
                Serial.Write(u'trace on;')
            </Action>
            <Action>
                Serial.Write(u'trace off;')
            </Action>
            <Action>
                Serial2.Write(u'trace on;')
            </Action>
            <Action>
                Serial2.Write(u'trace off;')
            </Action>
        </Macro>
        <Macro Name="Reset;">
            <Action>
                Serial.Write(u'Reset;')
            </Action>
            <Action>
                Serial2.Write(u'Reset;')
            </Action>
        </Macro>
    </Folder>
</EventGhost>
